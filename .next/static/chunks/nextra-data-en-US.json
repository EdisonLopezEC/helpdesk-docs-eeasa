{"/entorno":{"title":"Configuración de Entorno","data":{"":"¡Bienvenido a la página de Configuración de Entorno! Aquí te guiaremos a través del proceso de levantar el proyecto que combina la potencia de React en el front-end y Spring en el back-end. A continuación, te proporcionamos instrucciones detalladas sobre cómo configurar, compilar y ejecutar esta aplicación para lograr una experiencia de desarrollo fluida.","levantando-el-proyecto-react#Levantando el Proyecto React:":"","requisitos-previos#Requisitos Previos:":"Asegúrate de tener Node.js y npm instalados en tu sistema. Puedes verificar su instalación ejecutando los comandos node -v y npm -v en tu terminal.","navega-al-directorio-front-end#Navega al Directorio Front-End:":"Abre la terminal y navega hasta el directorio donde se encuentra el código del front-end de tu proyecto.","instala-dependencias#Instala Dependencias:":"Ejecuta npm install para instalar todas las dependencias necesarias definidas en el archivo package.json.","iniciar-el-servidor-de-desarrollo#Iniciar el Servidor de Desarrollo:":"Utiliza el comando npm start para levantar un servidor de desarrollo. Tu aplicación React estará disponible en http://localhost:3000.","levantando-el-proyecto-spring#Levantando el Proyecto Spring:":"","configuración-de-la-base-de-datos#Configuración de la Base de Datos:":"Asegúrate de configurar correctamente la base de datos en la configuración de Spring, incluyendo URL, usuario y contraseña.","navega-al-directorio-back-end#Navega al Directorio Back-End:":"En tu terminal, navega hasta el directorio del back-end de tu proyecto.","compilación-y-empaquetado#Compilación y Empaquetado:":"Utiliza herramientas de construcción como Maven o Gradle para compilar y empaquetar tu proyecto Spring en un archivo .war.","configuración-de-rutas-estáticas#Configuración de Rutas Estáticas:":"Una vez que tienes el archivo .war, despliégalo en un servidor de aplicaciones compatible, como Apache Tomcat. Asegúrate de configurar correctamente las rutas estáticas para los archivos generados por React.","integrando-el-front-end-con-el-back-end#Integrando el Front-End con el Back-End:":"","copia-de-los-archivos-de-build#Copia de los Archivos de Build:":"Después de compilar el proyecto React, copia la carpeta build generada en la carpeta static del proyecto Spring. Esto permitirá que Spring sirva los archivos estáticos de React.","configuración-de-rutas-en-spring#Configuración de Rutas en Spring:":"Asegúrate de configurar las rutas adecuadas en Spring para manejar las solicitudes al front-end y al back-end de manera correcta.Siguiendo estos pasos, lograrás levantar y desplegar tanto el front-end React como el back-end Spring en un entorno armonioso. Esta configuración te permitirá aprovechar al máximo las capacidades combinadas de estas tecnologías y ofrecer una experiencia completa y eficiente en tu proyecto."}},"/interfaz":{"title":"¡Bienvenido a la Sección de Mockups e Interfaz!","data":{"":"¡Descubre nuestro proyecto innovador que fusiona la agilidad de React en el front-end con la potencia de Spring en el back-end!A través de este archivo .war, presentamos una solución de vanguardia diseñada para potenciar la gestión de soporte y comunicación en la Empresa Eléctrica Ambato.","imagina-la-revolución#Imagina la Revolución":"Imagina una plataforma en línea que revoluciona la manera en que se manejan las incidencias y se facilita la comunicación. Nuestra aplicación transforma correos enviados a una dirección específica en incidencias automáticas y administrables.Pero eso no es todo, también introduce un tablero Kanban interactivo con características avanzadas, como estados personalizados, categorías detalladas, roles diferenciados ¡y mucho más!","react-en-el-front-end-spring-en-el-back-end#React en el Front-End, Spring en el Back-End":"Con React en el front-end, hemos creado una interfaz de usuario moderna e interactiva. Sus componentes reutilizables y su enfoque declarativo han dado forma a una experiencia fluida.Por otro lado, Spring en el back-end proporciona una estructura robusta para manejar la lógica empresarial, garantizando seguridad y escalabilidad.","explora-y-descubre#Explora y Descubre":"En esta sección, explora nuestros mockups y la interfaz cuidadosamente diseñada. Desde la automatización de incidencias hasta la gestión de roles y el tablero Kanban, cada detalle busca optimizar la productividad en la Empresa Eléctrica Ambato.¡Descubre cómo la fusión de React y Spring redefine la gestión de incidencias y facilita la colaboración! Te invitamos a explorar las páginas de usuarios, conocer flujos de trabajo y experimentar la transformación digital en la gestión empresarial.","inicio-de-sesión#Inicio de Sesión":"Le damos la bienvenida a la página de inicio de sesión de nuestra plataforma. Aquí, le brindamos un acceso seguro y eficiente a todas las funciones y capacidades que nuestra aplicación tiene para ofrecer.Nuestro sistema de inicio de sesión se basa en un mecanismo de token, un código único que otorga acceso controlado a los usuarios. Estos tokens cuentan con una ventana de tiempo limitada, garantizando la seguridad de la plataforma y protegiendo sus datos. Además de brindar autenticación, estos tokens permiten la ejecución segura de las peticiones en el back-end.Le invitamos a ingresar con sus credenciales y experimentar la forma en que nuestra plataforma garantiza la seguridad y la agilidad en el acceso. Descubra cómo nuestra implementación de tokens mejora la experiencia del usuario y protege sus interacciones en línea.Acceda con confianza y explore todas las posibilidades que nuestra plataforma tiene reservadas para usted.","roles-en-nuestra-plataforma#Roles en Nuestra Plataforma":"En el corazón de nuestra plataforma, se encuentra la estructura de roles cuidadosamente diseñada para optimizar la gestión de incidencias y garantizar una colaboración fluida. Presentamos tres roles distintivos que abarcan una variedad de responsabilidades, cada uno contribuyendo a un proceso de trabajo cohesionado y efectivo.","administrador#Administrador":"Como el pilar de la gestión, el rol de Administrador ostenta la capacidad de dar forma a la dinámica de la plataforma. Desde categorizar tickets hasta supervisar el estado de aquellos que están siendo atendidos por los técnicos, el Administrador establece la dirección y asegura la eficiencia del proceso.","dashboard-administrador#Dashboard Administrador":"","tablero-kanban-administrador-gestionar#Tablero Kanban Administrador Gestionar":"","tablero-kanban-administrador-atender#Tablero Kanban Administrador Atender":"","ver-estado-de-los-tickets#Ver estado de los tickets":"","filtros-por-mes-y-categoria#Filtros por Mes y Categoria":"","técnico#Técnico":"Los Técnicos son los encargados de brindar soluciones prácticas a los problemas presentados en los tickets. Con la facultad de atender las incidencias previamente categorizadas y solicitadas por el Administrador, los Técnicos aseguran una resolución oportuna y efectiva, contribuyendo a la satisfacción del usuario final.","dashboard-técnico#Dashboard Técnico":"","atender-un-ticket-por-un-técnico#Atender un ticket por un Técnico":"","finalizar-un-ticket-por-un-técnico#Finalizar un ticket por un Técnico":"","tablero-kanban-técnico#Tablero Kanban Técnico":"","categorizador#Categorizador":"El rol de Categorizador desempeña una función esencial en la organización y eficiencia de la plataforma. Los Categorizadores tienen la capacidad de asignar a cada incidencia una categoría específica, como soporte, infraestructura, desarrollo y administración. Esta categorización precisa facilita la gestión y la priorización adecuada.Este sistema de roles diferenciados se interconecta en armonía, permitiendo que cada miembro del equipo aporte de manera específica a los procesos de soporte y gestión. Juntos, estos roles colaboran para lograr una operación fluida y enfocada en el usuario, asegurando que las incidencias se manejen con rapidez y profesionalismo.¡Descubra cómo nuestra implementación de roles redefine la colaboración y optimiza la gestión de incidencias en línea con las necesidades únicas de la Empresa Eléctrica Ambato!","página-404#Página 404":""}},"/":{"title":"Introducción a la Plataforma de Mesa de Ayuda de la Empresa Eléctrica Ambato","data":{"":"¡Bienvenido a la documentación oficial de la Plataforma de Mesa de Ayuda de la Empresa Eléctrica Ambato!🌟 Esta plataforma innovadora ha sido diseñada y desarrollada para optimizar y agilizar el proceso de gestión de incidencias y solicitudes, brindando a la organización la capacidad de atender de manera eficiente las necesidades de sus clientes y usuarios internos.La Plataforma de Mesa de Ayuda fusiona la potencia de la tecnología front-end basada en React con la robustez del back-end basado en el framework Spring. Este enfoque integral proporciona una solución completa y escalable que permite la captura, seguimiento y resolución efectiva de incidencias y solicitudes, mientras facilita la administración de un tablero Kanban personalizable que refleja el flujo de trabajo único de la Empresa Eléctrica Ambato.","características-destacadas#Características Destacadas:":"Gestión de Correos Electrónicos Eficiente: La plataforma es capaz de recibir y procesar correos electrónicos enviados a una dirección designada, creando automáticamente incidencias y permitiendo una rápida asignación a los equipos responsables.\nTablero Kanban Personalizable: Nuestro tablero Kanban integrado ofrece una vista visual de las incidencias en diferentes estados, permitiendo una gestión eficaz y la monitorización constante del progreso. Cada incidencia puede ser categorizada, asignada a roles específicos y avanzar a través de estados predefinidos.\nInterfaz React Intuitiva: La interfaz front-end basada en React proporciona una experiencia de usuario fluida y atractiva. Los componentes reutilizables permiten una navegación intuitiva y una interacción eficiente con las funcionalidades de la plataforma.\nIntegración con Spring Back-End: El sólido back-end construido en el framework Spring garantiza la seguridad de los datos, la gestión de transacciones y la integración perfecta con bases de datos. La comunicación entre el front-end y el back-end se realiza a través de una API RESTful, asegurando un flujo de datos consistente y seguro.\nSeguridad y Privacidad: Reconociendo la importancia de la seguridad de los datos, la plataforma implementa medidas de seguridad avanzadas para proteger la información sensible de nuestros usuarios y la confidencialidad de las incidencias en curso.","guía-de-usuario#Guía de Usuario":"Esta documentación está diseñada para guiar a los usuarios a través de todas las funcionalidades de la Plataforma de Mesa de Ayuda de la Empresa Eléctrica Ambato. Desde la instalación y configuración inicial hasta la gestión diaria de incidencias y la personalización del tablero Kanban, cada sección proporcionará información detallada y pasos prácticos para garantizar un uso efectivo y eficiente de la plataforma.Le agradecemos por confiar en nuestra solución tecnológica para mejorar la gestión de incidencias y las operaciones en la Empresa Eléctrica Ambato. Juntos, estamos dando paso a una forma más inteligente y ágil de abordar las necesidades de nuestros clientes y usuarios internos. 💡🚀"}},"/inicio/objetivosAlcance":{"title":"Alcance del Proyecto:","data":{"":"Automatización de la Creación de Incidencias: El objetivo principal de este proyecto es automatizar la creación de incidencias a partir de correos electrónicos enviados a una dirección designada. Se pretende reducir la carga manual de los agentes de soporte al convertir automáticamente los correos en incidencias registradas en la plataforma.\nOptimización de la Gestión de Incidencias: El proyecto busca optimizar la gestión de incidencias a través de un tablero Kanban interactivo. Los usuarios tendrán la capacidad de categorizar, asignar, priorizar y realizar un seguimiento de las incidencias a medida que avanzan a través de diferentes estados en el tablero.\nFacilitación de la Comunicación Interna: La plataforma tiene como objetivo mejorar la comunicación interna entre los diferentes equipos y roles involucrados en la resolución de incidencias. Proporcionará un canal centralizado para la colaboración, permitiendo una asignación eficiente de tareas y una actualización constante del progreso.\nSeguimiento de Desempeño y Análisis: Se busca proporcionar herramientas para el seguimiento y análisis del desempeño del equipo de soporte. Los informes y métricas generados a partir de los datos de las incidencias permitirán identificar tendencias, áreas de mejora y tomar decisiones informadas para optimizar los procesos.\n\n\nCaptura de Correos Electrónicos: La plataforma capturará correos electrónicos enviados a una dirección específica, analizará su contenido y creará automáticamente incidencias correspondientes.\nCreación de Incidencias Automáticas: La plataforma creará automáticamente incidencias a partir de los correos electrónicos, extrayendo información clave como el asunto, el remitente y el contenido del correo.\nTablero Kanban Interactivo: Se implementará un tablero Kanban interactivo en la interfaz de usuario, donde las incidencias podrán ser visualizadas, categorizadas, asignadas a roles específicos y avanzadas a través de diferentes estados.\nRoles y Permisos: La plataforma contará con roles y permisos que determinarán qué usuarios tienen acceso a qué funcionalidades y datos en el sistema. Esto garantizará la seguridad y la privacidad de la información.\nIntegración Front-End y Back-End: La comunicación entre el front-end basado en React y el back-end basado en Spring se realizará a través de una API RESTful, asegurando un flujo de datos coherente y seguro.\nSeguridad de Datos: Se implementarán medidas de seguridad avanzadas para proteger los datos confidenciales de las incidencias y garantizar la privacidad de los usuarios.\nGeneración de Informes y Métricas: La plataforma permitirá la generación de informes y métricas sobre el rendimiento del equipo de soporte, proporcionando información valiosa para la toma de decisiones informadas.\n\nEl alcance de este proyecto se enfoca en la automatización de la creación de incidencias, la optimización de la gestión de estas incidencias a través de un tablero Kanban y la mejora de la comunicación interna en la Empresa Eléctrica Ambato. Se centrará en ofrecer una solución completa que simplifique la gestión de incidencias y mejore la eficiencia operativa de la organización."}},"/inicio":{"title":"Tecnologías Utilizadas en el Proyecto:","data":{"":"La Plataforma de Mesa de Ayuda de la Empresa Eléctrica Ambato se ha desarrollado utilizando una combinación de tecnologías modernas en el ámbito del desarrollo web y empresarial. Estas tecnologías se han seleccionado cuidadosamente para garantizar un rendimiento sólido, una experiencia de usuario excepcional y una seguridad robusta en todos los aspectos del proyecto. A continuación, se detallan las principales tecnologías utilizadas:\nReact:\nReact, una biblioteca de JavaScript de código abierto desarrollada por Facebook, se utiliza para construir la interfaz de usuario interactiva y dinámica de la plataforma. React ofrece una estructura de componentes reutilizables que permiten una construcción modular y una actualización eficiente de la interfaz.\nSpring Framework:\nSpring Framework, un marco de desarrollo de aplicaciones Java de renombre mundial, es la piedra angular del back-end de la plataforma. Proporciona una infraestructura sólida para el manejo de transacciones, la seguridad, la gestión de datos y la integración con otras tecnologías.\nAPI RESTful:\nLa comunicación entre el front-end y el back-end se realiza a través de una API RESTful. Esta arquitectura permite una comunicación eficiente y estructurada entre los componentes de la plataforma, garantizando la coherencia de los datos y las interacciones.\nBase de Datos Relacional:\nSe utiliza una base de datos relacional para almacenar y administrar los datos esenciales de la plataforma. La elección de la base de datos proporciona un almacenamiento estructurado y confiable para las incidencias, los usuarios y otros elementos relevantes.\nTablero Kanban Personalizado:\nPara la implementación del tablero Kanban interactivo, se emplean tecnologías front-end que aprovechan las capacidades de React. Componentes específicos se desarrollan para gestionar la visualización y la interacción de las incidencias en diferentes estados.\nSeguridad y Autenticación:\nSe implementan protocolos de seguridad y autenticación sólidos para proteger los datos y garantizar el acceso adecuado a las funcionalidades de la plataforma. La tecnología empleada en esta área asegura la privacidad y la integridad de la información.\nHerramientas de Desarrollo y Despliegue:\nPara el desarrollo y el despliegue eficiente de la plataforma, se utilizan herramientas que optimizan el flujo de trabajo. Estas herramientas incluyen entornos de desarrollo integrados (IDE), sistemas de control de versiones y servidores de aplicaciones compatibles con archivos WAR.\nBibliotecas y Frameworks Adicionales:\nAdemás de las tecnologías principales, se utilizan bibliotecas y frameworks complementarios que mejoran la funcionalidad y la estética de la plataforma. Estas herramientas adicionales garantizan una experiencia de usuario rica y satisfactoria.\n\nLa selección de estas tecnologías ha sido estratégica para cumplir con los objetivos del proyecto y brindar una solución sólida y escalable a la Empresa Eléctrica Ambato. Cada componente tecnológico se ha integrado de manera cohesiva para crear una plataforma de mesa de ayuda que optimiza la gestión de incidencias y mejora la eficiencia operativa."}},"/back/emailcontroller":{"title":"Documentación de la Clase EmailController","data":{"":"La clase EmailController es un controlador de Spring que maneja operaciones relacionadas con el envío y recepción de correos electrónicos. Permite leer correos electrónicos entrantes y enviar correos electrónicos a destinatarios especificados.","endpoints#Endpoints":"","get-email#GET /email":"Este endpoint lee los correos electrónicos entrantes y crea registros de tickets en la base de datos. Luego, devuelve la lista de tickets en formato JSON.Parámetros:\nNinguno\n\nRespuesta:\n200 OK: Devuelve una lista de tickets en formato JSON.\n500 Internal Server Error: En caso de cualquier error interno.","post-emailsend#POST /email/send":"Este endpoint permite enviar correos electrónicos a un destinatario especificado.Parámetros:\nrecipient (String): El correo electrónico del destinatario.\nsubject (String): El asunto del correo electrónico.\nbody (String): El cuerpo del correo electrónico.\n\nRespuesta:\n200 OK: El correo electrónico se envió exitosamente.\n500 Internal Server Error: En caso de error al enviar el correo electrónico.","métodos-privados#Métodos Privados":"","getmessagecontentmessage-message#getMessageContent(Message message)":"Este método obtiene el contenido de un mensaje de correo electrónico. Puede ser un contenido de texto plano o HTML.","scheduleincomingmailservice#scheduleIncomingMailService()":"Este método programa la ejecución periódica del método getIncomingMail() para leer los correos electrónicos entrantes.","configuración#Configuración":"El controlador utiliza anotaciones de Spring para definir su comportamiento. Estas anotaciones incluyen:\n@RestController: Indica que la clase es un controlador que manejará las solicitudes HTTP.\n@CrossOrigin(origins = \"*\"): Permite solicitudes de cualquier origen.\n@RequestMapping(\"/email\"): Establece la ruta base para los endpoints en este controlador.","inicialización#Inicialización":"El método init() está anotado con @PostConstruct, lo que significa que se ejecutará después de que la clase se haya construido y todas las dependencias se hayan inyectado. En este método, se inicia la tarea programada para leer los correos electrónicos entrantes a intervalos regulares."}},"/back/emailservice":{"title":"Documentación de la Clase EmailService","data":{"":"La clase EmailService es un servicio en Spring que se encarga de manejar el envío y la recepción de correos electrónicos. Proporciona métodos para leer correos electrónicos entrantes desde una bandeja de entrada IMAP y para enviar correos electrónicos utilizando el protocolo SMTP.","atributos#Atributos":"La clase utiliza atributos que son configurados a través de propiedades de la aplicación:\nemailUsername: Usuario del correo electrónico.\nemailPassword: Contraseña del correo electrónico.\nemailHost: Host del servidor de correo entrante (IMAP).\nemailPort: Puerto del servidor de correo entrante (IMAP).\nemailProtocol: Protocolo para el servidor de correo entrante (IMAP).\nemailSender: Dirección de correo electrónico del remitente.\nemailSmtpHost: Host del servidor SMTP saliente.\nemailSmtpPort: Puerto del servidor SMTP saliente.\nemailSmtpProtocol: Protocolo para el servidor SMTP saliente.\nemailSmtpUser: Usuario del servidor SMTP saliente.\nemailsmtpSender: Dirección de correo electrónico del remitente para el servidor SMTP.","métodos#Métodos":"","readincomingmail#readIncomingMail()":"Este método lee correos electrónicos entrantes desde una bandeja de entrada IMAP configurada. Retorna una lista de mensajes (Message) correspondientes a los correos electrónicos entrantes.Excepciones:\nMessagingException: Se lanza si ocurre un error al leer los correos electrónicos.","sendemailstring-recipient-string-subject-string-body#sendEmail(String recipient, String subject, String body)":"Este método envía un correo electrónico utilizando el protocolo SMTP.Parámetros:\nrecipient (String): Correo electrónico del destinatario.\nsubject (String): Asunto del correo electrónico.\nbody (String): Cuerpo del correo electrónico.\n\nExcepciones:\nMessagingException: Se lanza si ocurre un error al enviar el correo electrónico.","configuración#Configuración":"Los atributos de configuración son inyectados a través de la anotación @Value utilizando las propiedades de la aplicación.","dependencias#Dependencias":"El servicio depende de las siguientes bibliotecas y clases:\njavax.mail: Proporciona clases para el envío y la recepción de correos electrónicos.\norg.springframework.beans.factory.annotation.Value: Utilizada para inyectar valores de propiedades."}},"/back":{"title":"Estructura del Proyecto","data":{"":"","configuración-de-la-aplicación-web#Configuración de la Aplicación Web":"En este archivo de configuración, se definen varias configuraciones relacionadas con la gestión de recursos y filtros para una aplicación web.\nEl de la clase WebConfig realiza una configuración detallada para manejar los recursos estáticos y establece un filtro personalizado para las URLs de la aplicación web.","configuración-de-recursos#Configuración de Recursos":"La clase WebConfig implementa la interfaz WebMvcConfigurer para personalizar la configuración de la aplicación web.\n@Configuration\npublic class WebConfig implements WebMvcConfigurer {\n\n@Override\npublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n// Configuración de manejo de recursos estáticos\n\nregistry.addResourceHandler(\"/**\")  // Patrón URL para los recursos\n.addResourceLocations(\"classpath:/static/static\")  // Ubicación de los recursos físicos\n.resourceChain(false)  // Desactiva el manejo de la cadena de recursos\n.addResolver(new PathResourceResolver() {\n@Override\nprotected Resource getResource(String resourcePath, Resource location) throws IOException, java.io.IOException {\n// Lógica para obtener el recurso solicitado\nResource requestedResource = location.createRelative(resourcePath);\nreturn requestedResource.exists() && requestedResource.isReadable() ? requestedResource : new ClassPathResource(\"/static/index.html\");\n}\n});  // Agrega un resolvedor personalizado para recursos\n}\n\n// Otros métodos de configuración y beans...\n}","explicación#Explicación":"En el código proporcionado, se realiza una configuración importante relacionada con la gestión de recursos y filtros en una aplicación web.","configuración-de-recursos-1#Configuración de Recursos":"En la implementación del método addResourceHandlers, se lleva a cabo la configuración del manejo de recursos estáticos:\nSe utiliza el método addResourceHandlers para agregar un manejador de recursos a la aplicación web. Este manejador se encargará de servir recursos estáticos, como archivos CSS, imágenes y JavaScript.\nEl patrón de URL \"/**\" especifica que todos los recursos, independientemente de su ubicación, serán manejados por este manejador.\nEl método addResourceLocations define la ubicación física de los recursos estáticos en el sistema de archivos. En este caso, los recursos se buscarán en la ruta classpath:/static/static.\nLa llamada a resourceChain(false) desactiva el manejo de la cadena de recursos, lo que significa que no se realizará una búsqueda en cascada de recursos en diferentes ubicaciones.\nSe agrega un resolvedor personalizado utilizando addResolver. Este resolvedor de recursos personalizado extiende PathResourceResolver y proporciona una lógica para obtener el recurso solicitado. Si el recurso solicitado existe y es legible, se devuelve ese recurso. De lo contrario, se devuelve un recurso de índice (index.html) desde la ubicación de clase (classpath:/static/index.html).","configuración-de-filtros#Configuración de Filtros":"También se define un filtro utilizando un bean en la clase WebConfig:\nSe utiliza el método spaWebFilter para crear y registrar un filtro personalizado llamado SpaWebFilter.\nEl filtro se configura para que actúe en todas las URL (\"/*\") de la aplicación.\nEl filtro SpaWebFilter se define y establece como el filtro a utilizar en la configuración."}},"/back/ticketscontroller":{"title":"Documentación de la Clase TicketsController","data":{"":"La clase TicketsController es un controlador de Spring que maneja operaciones relacionadas con los tickets de solicitud de servicio. Proporciona endpoints para consultar, crear y actualizar tickets, así como obtener estadísticas sobre los tickets por estado y año.","endpoints#Endpoints":"","get-tickets#GET /tickets":"Este endpoint devuelve una lista de todos los tickets de solicitud de servicio.Parámetros:\nAuthorization (Header): Token de autorización.\n\nRespuesta:\n200 OK: Devuelve una lista de tickets en formato JSON.\n401 Unauthorized: Si el token de autorización no es válido.\n400 Bad Request: En caso de cualquier otro error.","get-ticketsid#GET /tickets/{id}":"Este endpoint devuelve un ticket específico según su ID.Parámetros:\nAuthorization (Header): Token de autorización.\nid (Path): ID del ticket.\n\nRespuesta:\n200 OK: Devuelve el ticket en formato JSON.\n401 Unauthorized: Si el token de autorización no es válido.\n400 Bad Request: En caso de cualquier otro error.","post-tickets#POST /tickets":"Este endpoint crea un nuevo ticket.Parámetros:\nAuthorization (Header): Token de autorización.\nticket (Body): Datos del nuevo ticket.\n\nRespuesta:\n201 Created: El ticket se creó exitosamente.\n401 Unauthorized: Si el token de autorización no es válido.\n400 Bad Request: En caso de error al crear el ticket.","put-ticketsid#PUT /tickets/{id}":"Este endpoint actualiza un ticket existente.Parámetros:\nAuthorization (Header): Token de autorización.\nid (Path): ID del ticket a actualizar.\nticket (Body): Datos actualizados del ticket.\n\nRespuesta:\n200 OK: El ticket se actualizó exitosamente.\n401 Unauthorized: Si el token de autorización no es válido.\n400 Bad Request: En caso de error al actualizar el ticket.","post-ticketstechicalprogress#POST /tickets/techicalProgress":"Este endpoint envía una notificación de progreso técnico al remitente del ticket.Parámetros:\nAuthorization (Header): Token de autorización.\nremitente (Query): Correo electrónico del remitente.\n\nRespuesta:\n200 OK: La notificación se envió exitosamente.\n401 Unauthorized: Si el token de autorización no es válido.\n400 Bad Request: En caso de error al enviar la notificación.","post-ticketstechnicalcomplete#POST /tickets/technicalComplete":"Este endpoint envía una notificación de finalización técnica al remitente del ticket.Parámetros:\nAuthorization (Header): Token de autorización.\nremitente (Query): Correo electrónico del remitente.\n\nRespuesta:\n200 OK: La notificación se envió exitosamente.\n401 Unauthorized: Si el token de autorización no es válido.\n400 Bad Request: En caso de error al enviar la notificación.","otros-endpoints#Otros Endpoints":"Existen endpoints adicionales para obtener estadísticas sobre los tickets por estado y año, como /ticketsComplete, /ticketsRequired, /ticketsHold, /ticketsAsigned, /ticketsOpen, /ticketsComplete/{year}, /ticketsRequired/{year}, etc. Los parámetros y respuestas son similares a los mencionados anteriormente.","métodos-privados#Métodos Privados":"La clase contiene métodos privados para verificar la autenticación del usuario utilizando el token de autorización.","configuración#Configuración":"La clase utiliza anotaciones de Spring para definir su comportamiento, incluyendo @RestController, @CrossOrigin, y @RequestMapping.","dependencias#Dependencias":"La clase depende de las siguientes clases y servicios:\nTicketRepository: Repositorio de tickets para acceder a la base de datos.\nEmailService: Servicio para enviar correos electrónicos.\nUsuarioService: Servicio para verificar tokens de usuario.","autor#Autor":"Este controlador fue implementado por el equipo de desarrollo de la aplicación."}}}